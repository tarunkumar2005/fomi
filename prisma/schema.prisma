// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean           @default(false)
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  // Relations
  sessions      Session[]
  accounts      Account[]
  forms         Form[]
  workspaces    WorkspaceMember[]

  @@unique([email])
  @@map("users")
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  slug        String            @unique
  description String?
  plan        Plan              @default(FREE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  // Relations
  members     WorkspaceMember[]
  forms       Form[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  // Relations
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Form {
  id            String          @id @default(cuid())
  userId        String
  workspaceId   String?
  title         String          @default("Untitled form")
  description   String?         @default("Form description")
  slug          String          @unique
  // Form settings
  isPublished   Boolean         @default(false)
  isDraft       Boolean         @default(true)
  isArchived    Boolean         @default(false)
  // Form metadata
  estimatedTime String?         @default("5-7 minutes")
  category      String?
  tags          String[]
  // Customization
  theme         Json? // Colors, fonts, branding
  settings      Json? // Notifications, redirects, etc.
  // Analytics
  viewCount     Int             @default(0)
  responseCount Int             @default(0)
  // Timestamps
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  publishedAt   DateTime?
  archivedAt    DateTime?
  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace     Workspace?      @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  fields        Field[]
  responses     Response[]
  analytics     FormAnalytics[]

  @@map("forms")
}

model Field {
  id            String    @id @default(cuid())
  formId        String
  question      String
  type          FieldType
  required      Boolean   @default(false)
  order         Int
  // Field configuration
  placeholder   String?
  description   String?
  options       Json? // For choice fields
  // Validation rules
  minLength     Int?
  maxLength     Int?
  min           Float?
  max           Float?
  step          Float?
  pattern       String? // Regex pattern
  // UI configuration
  rows          Int? // For textarea
  columns       Int? // For grid layouts
  // File upload settings
  acceptedTypes String?
  maxFileSize   Int?
  maxFiles      Int?
  // Date/Time constraints
  minDate       String?
  maxDate       String?
  minTime       String?
  maxTime       String?
  // Rating settings
  maxRating     Int?      @default(5)
  ratingStyle   String? // stars, numbers, emoji
  // Advanced settings
  conditional   Json? // Conditional logic
  validation    Json? // Custom validation rules
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // Relations
  form          Form      @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("fields")
}

model Response {
  id          String   @id @default(cuid())
  formId      String
  data        Json // Field responses
  // Submission metadata
  submitterIp String?
  userAgent   String?
  referrer    String?
  location    Json? // Geolocation data
  // Status
  isComplete  Boolean  @default(true)
  isSpam      Boolean  @default(false)
  // Timestamps
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("responses")
}

model FormAnalytics {
  id        String   @id @default(cuid())
  formId    String
  date      DateTime @db.Date
  views     Int      @default(0)
  starts    Int      @default(0)
  completes Int      @default(0)
  // Relations
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formId, date])
  @@map("form_analytics")
}

// Enhanced enums

enum FieldType {
  // Text inputs
  TEXT
  EMAIL
  PHONE
  URL
  PASSWORD
  // Long text
  TEXTAREA
  // Choice fields
  RADIO
  CHECKBOX
  SELECT
  // Numeric
  NUMBER
  RATING
  SCALE
  // Date/Time
  DATE
  TIME
  DATETIME
  // File
  FILE
  IMAGE
  // Advanced
  SIGNATURE
  PAYMENT
  LOCATION
  @@map("field_types")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
  @@map("workspace_roles")
}

enum Plan {
  FREE
  PRO
  TEAM
  ENTERPRISE
  @@map("plans")
}

// Auth models (unchanged)

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  forms         Form[]

  @@unique([email])
  @@map("user")
}

model Form {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title        String    @default("Untitled form")
  description  String?   @default("Form description")
  slug         String    @unique // for public URLs
  
  // Form settings
  isPublished  Boolean   @default(false)
  isDraft      Boolean   @default(true)
  
  // Form metadata
  estimatedTime String?  @default("5-7 minutes")
  theme        Json?     // Allows flexible theming (colors, fonts, etc.)
  settings     Json?     // Form-level settings (notifications, etc.)
  
  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  publishedAt  DateTime?
  
  // Relations
  fields       Field[]
  responses    Response[]

  @@map("form")
}

model Field {
  id       String    @id @default(cuid())
  formId   String
  form     Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  // Basic field properties
  question    String                    // The question text (renamed from label)
  type        FieldType                 // Field type enum
  required    Boolean   @default(false) // Required field flag
  order       Int                       // Position in form (0, 1, 2...)
  
  // Field-specific properties
  placeholder String?                   // For text inputs, dropdowns
  options     Json?                     // Array of options for MCQ, checkbox, dropdown
  
  // Number field properties
  min         Float?                    // Minimum value for number fields
  max         Float?                    // Maximum value for number fields  
  step        Float?                    // Step value for number fields
  
  // Text field properties
  rows        Int?                      // Number of rows for textarea
  
  // File upload properties
  acceptedTypes String?                 // Accepted file types (.pdf,.doc,etc)
  maxFileSize   Int?                    // Max file size in bytes
  
  // Date/Time properties
  minDate     String?                   // Minimum date (ISO string)
  maxDate     String?                   // Maximum date (ISO string)
  minTime     String?                   // Minimum time (HH:MM)
  maxTime     String?                   // Maximum time (HH:MM)
  
  // Rating properties
  maxRating   Int?      @default(5)     // Maximum rating (3-10)
  
  // Validation rules
  validation  Json?                     // Custom validation rules
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("field")
}

model Response {
  id          String   @id @default(cuid())
  formId      String
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  // Response data
  data        Json     // Stores field responses as { fieldId: value }
  
  // Submission metadata
  submitterIp String?  // IP address of submitter
  userAgent   String?  // Browser/device info
  referrer    String?  // Where they came from
  
  // Timestamps
  submittedAt DateTime @default(now())

  @@map("response")
}

// Enhanced field type enum matching your implementation
enum FieldType {
  // Text inputs
  TEXT         // Short answer text
  EMAIL        // Email input with validation
  PHONE        // Phone number input
  
  // Long text
  TEXTAREA     // Paragraph/long answer
  
  // Choice fields
  RADIO        // Multiple choice (single selection)
  CHECKBOX     // Checkboxes (multiple selection)
  SELECT       // Dropdown selection
  
  // Numeric
  NUMBER       // Number input
  RATING       // Star rating
  
  // Date/Time
  DATE         // Date picker
  TIME         // Time picker
  
  // File
  FILE         // File upload
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
